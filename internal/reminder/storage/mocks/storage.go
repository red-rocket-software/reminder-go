// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/red-rocket-software/reminder-go/internal/reminder/domain"
	storage "github.com/red-rocket-software/reminder-go/internal/reminder/storage"
)

// MockReminderRepo is a mock of ReminderRepo interface.
type MockReminderRepo struct {
	ctrl     *gomock.Controller
	recorder *MockReminderRepoMockRecorder
}

// MockReminderRepoMockRecorder is the mock recorder for MockReminderRepo.
type MockReminderRepoMockRecorder struct {
	mock *MockReminderRepo
}

// NewMockReminderRepo creates a new mock instance.
func NewMockReminderRepo(ctrl *gomock.Controller) *MockReminderRepo {
	mock := &MockReminderRepo{ctrl: ctrl}
	mock.recorder = &MockReminderRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReminderRepo) EXPECT() *MockReminderRepoMockRecorder {
	return m.recorder
}

// CreateRemind mocks base method.
func (m *MockReminderRepo) CreateRemind(ctx context.Context, todo domain.Todo) (domain.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRemind", ctx, todo)
	ret0, _ := ret[0].(domain.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRemind indicates an expected call of CreateRemind.
func (mr *MockReminderRepoMockRecorder) CreateRemind(ctx, todo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRemind", reflect.TypeOf((*MockReminderRepo)(nil).CreateRemind), ctx, todo)
}

// CreateUserConfigs mocks base method.
func (m *MockReminderRepo) CreateUserConfigs(ctx context.Context, userID string) (domain.UserConfigs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserConfigs", ctx, userID)
	ret0, _ := ret[0].(domain.UserConfigs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserConfigs indicates an expected call of CreateUserConfigs.
func (mr *MockReminderRepoMockRecorder) CreateUserConfigs(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserConfigs", reflect.TypeOf((*MockReminderRepo)(nil).CreateUserConfigs), ctx, userID)
}

// DeleteRemind mocks base method.
func (m *MockReminderRepo) DeleteRemind(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRemind", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRemind indicates an expected call of DeleteRemind.
func (mr *MockReminderRepoMockRecorder) DeleteRemind(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRemind", reflect.TypeOf((*MockReminderRepo)(nil).DeleteRemind), ctx, id)
}

// GetRemindByID mocks base method.
func (m *MockReminderRepo) GetRemindByID(ctx context.Context, id int) (domain.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRemindByID", ctx, id)
	ret0, _ := ret[0].(domain.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRemindByID indicates an expected call of GetRemindByID.
func (mr *MockReminderRepoMockRecorder) GetRemindByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemindByID", reflect.TypeOf((*MockReminderRepo)(nil).GetRemindByID), ctx, id)
}

// GetReminds mocks base method.
func (m *MockReminderRepo) GetReminds(ctx context.Context, params storage.FetchParams, userID string) ([]domain.Todo, int, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReminds", ctx, params, userID)
	ret0, _ := ret[0].([]domain.Todo)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(int)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetReminds indicates an expected call of GetReminds.
func (mr *MockReminderRepoMockRecorder) GetReminds(ctx, params, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReminds", reflect.TypeOf((*MockReminderRepo)(nil).GetReminds), ctx, params, userID)
}

// GetRemindsForDeadlineNotification mocks base method.
func (m *MockReminderRepo) GetRemindsForDeadlineNotification(ctx context.Context) ([]domain.NotificationRemind, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRemindsForDeadlineNotification", ctx)
	ret0, _ := ret[0].([]domain.NotificationRemind)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRemindsForDeadlineNotification indicates an expected call of GetRemindsForDeadlineNotification.
func (mr *MockReminderRepoMockRecorder) GetRemindsForDeadlineNotification(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemindsForDeadlineNotification", reflect.TypeOf((*MockReminderRepo)(nil).GetRemindsForDeadlineNotification), ctx)
}

// GetRemindsForNotification mocks base method.
func (m *MockReminderRepo) GetRemindsForNotification(ctx context.Context) ([]domain.NotificationRemind, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRemindsForNotification", ctx)
	ret0, _ := ret[0].([]domain.NotificationRemind)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRemindsForNotification indicates an expected call of GetRemindsForNotification.
func (mr *MockReminderRepoMockRecorder) GetRemindsForNotification(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemindsForNotification", reflect.TypeOf((*MockReminderRepo)(nil).GetRemindsForNotification), ctx)
}

// GetUserConfigs mocks base method.
func (m *MockReminderRepo) GetUserConfigs(ctx context.Context, userID string) (domain.UserConfigs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserConfigs", ctx, userID)
	ret0, _ := ret[0].(domain.UserConfigs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserConfigs indicates an expected call of GetUserConfigs.
func (mr *MockReminderRepoMockRecorder) GetUserConfigs(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserConfigs", reflect.TypeOf((*MockReminderRepo)(nil).GetUserConfigs), ctx, userID)
}

// GetUserRoutes mocks base method.
func (m *MockReminderRepo) GetUserRoutes(ctx context.Context, role string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRoutes", ctx, role)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRoutes indicates an expected call of GetUserRoutes.
func (mr *MockReminderRepoMockRecorder) GetUserRoutes(ctx, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRoutes", reflect.TypeOf((*MockReminderRepo)(nil).GetUserRoutes), ctx, role)
}

// SeedTodos mocks base method.
func (m *MockReminderRepo) SeedTodos() ([]domain.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SeedTodos")
	ret0, _ := ret[0].([]domain.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SeedTodos indicates an expected call of SeedTodos.
func (mr *MockReminderRepoMockRecorder) SeedTodos() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SeedTodos", reflect.TypeOf((*MockReminderRepo)(nil).SeedTodos))
}

// SeedTodosForDeadline mocks base method.
func (m *MockReminderRepo) SeedTodosForDeadline() ([]domain.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SeedTodosForDeadline")
	ret0, _ := ret[0].([]domain.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SeedTodosForDeadline indicates an expected call of SeedTodosForDeadline.
func (mr *MockReminderRepoMockRecorder) SeedTodosForDeadline() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SeedTodosForDeadline", reflect.TypeOf((*MockReminderRepo)(nil).SeedTodosForDeadline))
}

// SeedUserConfig mocks base method.
func (m *MockReminderRepo) SeedUserConfig() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SeedUserConfig")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SeedUserConfig indicates an expected call of SeedUserConfig.
func (mr *MockReminderRepoMockRecorder) SeedUserConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SeedUserConfig", reflect.TypeOf((*MockReminderRepo)(nil).SeedUserConfig))
}

// Truncate mocks base method.
func (m *MockReminderRepo) Truncate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Truncate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Truncate indicates an expected call of Truncate.
func (mr *MockReminderRepoMockRecorder) Truncate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Truncate", reflect.TypeOf((*MockReminderRepo)(nil).Truncate))
}

// UpdateNotification mocks base method.
func (m *MockReminderRepo) UpdateNotification(ctx context.Context, id int, dao domain.NotificationDAO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNotification", ctx, id, dao)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNotification indicates an expected call of UpdateNotification.
func (mr *MockReminderRepoMockRecorder) UpdateNotification(ctx, id, dao interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNotification", reflect.TypeOf((*MockReminderRepo)(nil).UpdateNotification), ctx, id, dao)
}

// UpdateNotifyPeriod mocks base method.
func (m *MockReminderRepo) UpdateNotifyPeriod(ctx context.Context, id int, timeToDelete string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNotifyPeriod", ctx, id, timeToDelete)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNotifyPeriod indicates an expected call of UpdateNotifyPeriod.
func (mr *MockReminderRepoMockRecorder) UpdateNotifyPeriod(ctx, id, timeToDelete interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNotifyPeriod", reflect.TypeOf((*MockReminderRepo)(nil).UpdateNotifyPeriod), ctx, id, timeToDelete)
}

// UpdateRemind mocks base method.
func (m *MockReminderRepo) UpdateRemind(ctx context.Context, id int, input domain.TodoUpdateInput) (domain.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRemind", ctx, id, input)
	ret0, _ := ret[0].(domain.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRemind indicates an expected call of UpdateRemind.
func (mr *MockReminderRepoMockRecorder) UpdateRemind(ctx, id, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRemind", reflect.TypeOf((*MockReminderRepo)(nil).UpdateRemind), ctx, id, input)
}

// UpdateStatus mocks base method.
func (m *MockReminderRepo) UpdateStatus(ctx context.Context, id int, updateInput domain.TodoUpdateStatusInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, id, updateInput)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockReminderRepoMockRecorder) UpdateStatus(ctx, id, updateInput interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockReminderRepo)(nil).UpdateStatus), ctx, id, updateInput)
}

// UpdateUserConfig mocks base method.
func (m *MockReminderRepo) UpdateUserConfig(ctx context.Context, id string, input domain.UserConfigs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserConfig", ctx, id, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserConfig indicates an expected call of UpdateUserConfig.
func (mr *MockReminderRepoMockRecorder) UpdateUserConfig(ctx, id, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserConfig", reflect.TypeOf((*MockReminderRepo)(nil).UpdateUserConfig), ctx, id, input)
}
